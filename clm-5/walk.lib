#0Y_ #0Y |CHARSET|::|UTF-8|
(|SYSTEM|::|%IN-PACKAGE| "WALKER" :|NICKNAMES| '|COMMON-LISP|::|NIL| :|USE|
 '|COMMON-LISP|::|NIL| :|CASE-SENSITIVE| |COMMON-LISP|::|NIL| :|CASE-INVERTED|
 |COMMON-LISP|::|NIL|)
(|COMMON-LISP|::|USE-PACKAGE| '("COMMON-LISP") "WALKER")
(|COMMON-LISP|::|FIND-PACKAGE| "WALKER")
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "WALKER"))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|UNBOUND-LEXICAL-FUNCTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |WALKER|::|ARGS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|WALKER|::|WITH-AUGMENTED-ENVIRONMENT|)
(|SYSTEM|::|%PUTD| '|WALKER|::|WITH-AUGMENTED-ENVIRONMENT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |WALKER|::|WITH-AUGMENTED-ENVIRONMENT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G2986| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G2987|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 2. 2. |COMMON-LISP|::|T|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|WALKER|::|WITH-AUGMENTED-ENVIRONMENT| #1#
          '#4=(|WALKER|::|NEW-ENV| |WALKER|::|OLD-ENV| |COMMON-LISP|::|&KEY|
               |WALKER|::|FUNCTIONS| |WALKER|::|MACROS|))
         #1#))
       (|WALKER|::|NEW-ENV| (|COMMON-LISP|::|CAR| #3#))
       (|WALKER|::|OLD-ENV| (|COMMON-LISP|::|CADR| . #5=(#3#)))
       (#6=#:|G2988| (|COMMON-LISP|::|CDDR| . #5#))
       (|WALKER|::|FUNCTIONS|
        (|COMMON-LISP|::|GETF| #6# ':|FUNCTIONS| . #7=(|COMMON-LISP|::|NIL|)))
       (|WALKER|::|MACROS| (|COMMON-LISP|::|GETF| #6# ':|MACROS| . #7#))
       (|WALKER|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|SYSTEM|::|KEYWORD-TEST| #6# '(:|MACROS| :|FUNCTIONS|))
      (|COMMON-LISP|::|BLOCK| |WALKER|::|WITH-AUGMENTED-ENVIRONMENT|
       `(|COMMON-LISP|::|LET|
         ((,|WALKER|::|NEW-ENV|
           (|WALKER|::|WITH-AUGMENTED-ENVIRONMENT-INTERNAL|
            ,|WALKER|::|OLD-ENV| ,|WALKER|::|FUNCTIONS| ,|WALKER|::|MACROS|)))
         ,@|WALKER|::|BODY|))))))
  '(#4# |COMMON-LISP|::|&BODY| |WALKER|::|BODY|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WITH-AUGMENTED-ENVIRONMENT-INTERNAL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|ENV| |WALKER|::|FUNCTIONS| |WALKER|::|MACROS|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|ENVIRONMENT-FUNCTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|WALKER|::|ENV| |WALKER|::|FN|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|ENVIRONMENT-MACRO|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|WALKER|::|ENV| |WALKER|::|MACRO|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|WALKER|::|WITH-NEW-DEFINITION-IN-ENVIRONMENT|)
(|SYSTEM|::|%PUTD| '|WALKER|::|WITH-NEW-DEFINITION-IN-ENVIRONMENT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |WALKER|::|WITH-NEW-DEFINITION-IN-ENVIRONMENT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G3061| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G3062|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 3. 3. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|WALKER|::|WITH-NEW-DEFINITION-IN-ENVIRONMENT| #1#
          '#4=(|WALKER|::|NEW-ENV| |WALKER|::|OLD-ENV|
               |WALKER|::|MACROLET/FLET/LABELS-FORM|))
         #1#))
       (|WALKER|::|NEW-ENV| (|COMMON-LISP|::|CAR| #3#))
       (|WALKER|::|OLD-ENV| (|COMMON-LISP|::|CADR| . #5=(#3#)))
       (|WALKER|::|MACROLET/FLET/LABELS-FORM| (|COMMON-LISP|::|CADDR| . #5#))
       (|WALKER|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |WALKER|::|WITH-NEW-DEFINITION-IN-ENVIRONMENT|
       (|COMMON-LISP|::|LET|
        ((|WALKER|::|FUNCTIONS| (|COMMON-LISP|::|MAKE-SYMBOL| "Functions"))
         (|WALKER|::|MACROS| (|COMMON-LISP|::|MAKE-SYMBOL| "Macros")))
        `(|COMMON-LISP|::|LET|
          ((,|WALKER|::|FUNCTIONS| |COMMON-LISP|::|NIL|)
           (,|WALKER|::|MACROS| |COMMON-LISP|::|NIL|))
          (|COMMON-LISP|::|ECASE|
           (|COMMON-LISP|::|CAR| ,|WALKER|::|MACROLET/FLET/LABELS-FORM|)
           ((|COMMON-LISP|::|FLET| |COMMON-LISP|::|LABELS|)
            (|COMMON-LISP|::|DOLIST|
             (|WALKER|::|FN|
              (|COMMON-LISP|::|CADR| ,|WALKER|::|MACROLET/FLET/LABELS-FORM|))
             (|COMMON-LISP|::|PUSH| |WALKER|::|FN| ,|WALKER|::|FUNCTIONS|)))
           ((|COMMON-LISP|::|MACROLET|)
            (|COMMON-LISP|::|DOLIST|
             (|WALKER|::|MAC|
              (|COMMON-LISP|::|CADR| ,|WALKER|::|MACROLET/FLET/LABELS-FORM|))
             (|COMMON-LISP|::|PUSH|
              (|COMMON-LISP|::|LIST| (|COMMON-LISP|::|CAR| |WALKER|::|MAC|)
               (|WALKER|::|CONVERT-MACRO-TO-LAMBDA|
                (|COMMON-LISP|::|CADR| |WALKER|::|MAC|)
                (|COMMON-LISP|::|CDDR| |WALKER|::|MAC|)
                (|COMMON-LISP|::|STRING|
                 (|COMMON-LISP|::|CAR| |WALKER|::|MAC|))))
              ,|WALKER|::|MACROS|))))
          (|WALKER|::|WITH-AUGMENTED-ENVIRONMENT|
           (,|WALKER|::|NEW-ENV| ,|WALKER|::|OLD-ENV| :|FUNCTIONS|
            ,|WALKER|::|FUNCTIONS| :|MACROS| ,|WALKER|::|MACROS|)
           ,@|WALKER|::|BODY|))))))))
  '(#4# |COMMON-LISP|::|&BODY| |WALKER|::|BODY|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|CONVERT-MACRO-TO-LAMBDA|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|LLIST| |WALKER|::|BODY| |COMMON-LISP|::|&OPTIONAL|
    (|WALKER|::|NAME| "Dummy Macro"))))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|WALKER|::|WALKER-ENVIRONMENT-BIND|)
(|SYSTEM|::|%PUTD| '|WALKER|::|WALKER-ENVIRONMENT-BIND|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |WALKER|::|WALKER-ENVIRONMENT-BIND|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G3083| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G3084|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 2. 2. |COMMON-LISP|::|T|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|WALKER|::|WALKER-ENVIRONMENT-BIND| #1#
          '#4=(|WALKER|::|VAR| |WALKER|::|ENV| |COMMON-LISP|::|&REST|
               |WALKER|::|KEY-ARGS|))
         #1#))
       (|WALKER|::|VAR| (|COMMON-LISP|::|CAR| #3#))
       (|WALKER|::|ENV| (|COMMON-LISP|::|CADR| . #5=(#3#)))
       (|WALKER|::|KEY-ARGS| (|COMMON-LISP|::|CDDR| . #5#))
       (|WALKER|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |WALKER|::|WALKER-ENVIRONMENT-BIND|
       `(|WALKER|::|WITH-AUGMENTED-ENVIRONMENT|
         (,|WALKER|::|VAR| ,|WALKER|::|ENV| :|MACROS|
          (|WALKER|::|WALKER-ENVIRONMENT-BIND-1| ,|WALKER|::|ENV|
           ,.|WALKER|::|KEY-ARGS|))
         . ,|WALKER|::|BODY|))))))
  '(#4# |COMMON-LISP|::|&BODY| |WALKER|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |WALKER|::|*KEY-TO-WALKER-ENVIRONMENT*|))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|ENV-LOCK|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALKER-ENVIRONMENT-BIND-1|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|ENV| |COMMON-LISP|::|&KEY|
    (|WALKER|::|WALK-FUNCTION| |COMMON-LISP|::|NIL| |WALKER|::|WFNP|)
    (|WALKER|::|WALK-FORM| |COMMON-LISP|::|NIL| |WALKER|::|WFOP|)
    (|WALKER|::|DECLARATIONS| |COMMON-LISP|::|NIL| |WALKER|::|DECP|)
    (|WALKER|::|LEXICAL-VARIABLES| |COMMON-LISP|::|NIL| |WALKER|::|LEXP|))))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|ENV-WALK-FUNCTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|ENV-WALK-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|ENV-DECLARATIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|ENV-LEXICAL-VARIABLES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|NOTE-DECLARATION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|DECLARATION| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|NOTE-LEXICAL-BINDING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|WALKER|::|THING| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|VARIABLE-LEXICAL-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|WALKER|::|VAR| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|VARIABLE-SYMBOL-MACRO-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|WALKER|::|VAR| |WALKER|::|ENV|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |WALKER|::|*VARIABLE-DECLARATIONS*|))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|VARIABLE-DECLARATION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|DECLARATION| |WALKER|::|VAR| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|VARIABLE-SPECIAL-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|WALKER|::|VAR| |WALKER|::|ENV|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |WALKER|::|*GLOBALLY-SPECIAL-VARIABLES*|))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|VARIABLE-GLOBALLY-SPECIAL-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|SYMBOL|)))
(|COMMON-LISP|::|DEFMACRO| |WALKER|::|GET-WALKER-TEMPLATE-INTERNAL|
 (|WALKER|::|X|)
 `(|COMMON-LISP|::|GET| ,|WALKER|::|X| '|WALKER|::|WALKER-TEMPLATE|))
(|COMMON-LISP|::|DEFMACRO| |WALKER|::|DEFINE-WALKER-TEMPLATE|
 (|WALKER|::|NAME| |COMMON-LISP|::|&OPTIONAL|
  (|WALKER|::|TEMPLATE|
   '(|COMMON-LISP|::|NIL| |WALKER|::|REPEAT| (|COMMON-LISP|::|EVAL|))))
 `(|COMMON-LISP|::|EVAL-WHEN| (|COMMON-LISP|::|LOAD| |COMMON-LISP|::|EVAL|)
   (|COMMON-LISP|::|SETF|
    (|WALKER|::|GET-WALKER-TEMPLATE-INTERNAL| ',|WALKER|::|NAME|)
    ',|WALKER|::|TEMPLATE|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|WALKER|::|GET-WALKER-TEMPLATE-INTERNAL|)
(|SYSTEM|::|%PUTD| '|WALKER|::|GET-WALKER-TEMPLATE-INTERNAL|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |WALKER|::|GET-WALKER-TEMPLATE-INTERNAL|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|WALKER|::|X| (|COMMON-LISP|::|CADR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |WALKER|::|GET-WALKER-TEMPLATE-INTERNAL|
       `(|COMMON-LISP|::|GET| ,|WALKER|::|X| '|WALKER|::|WALKER-TEMPLATE|))))))
  '(|WALKER|::|X|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|WALKER|::|DEFINE-WALKER-TEMPLATE|)
(|SYSTEM|::|%PUTD| '|WALKER|::|DEFINE-WALKER-TEMPLATE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |WALKER|::|DEFINE-WALKER-TEMPLATE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 3.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|WALKER|::|NAME|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|WALKER|::|TEMPLATE|
        (|COMMON-LISP|::|IF| (|COMMON-LISP|::|CDDR| . #1#)
         (|COMMON-LISP|::|CADDR| . #1#)
         #2='(|COMMON-LISP|::|NIL| |WALKER|::|REPEAT|
              (|COMMON-LISP|::|EVAL|)))))
      (|COMMON-LISP|::|BLOCK| |WALKER|::|DEFINE-WALKER-TEMPLATE|
       `(|COMMON-LISP|::|EVAL-WHEN|
         (|COMMON-LISP|::|LOAD| |COMMON-LISP|::|EVAL|)
         (|COMMON-LISP|::|SETF|
          (|WALKER|::|GET-WALKER-TEMPLATE-INTERNAL| ',|WALKER|::|NAME|)
          ',|WALKER|::|TEMPLATE|)))))))
  '(|WALKER|::|NAME| |COMMON-LISP|::|&OPTIONAL| (|WALKER|::|TEMPLATE| #2#))))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|GET-WALKER-TEMPLATE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|WALKER|::|X|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|GET-IMPLEMENTATION-DEPENDENT-WALKER-TEMPLATE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|WALKER|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |WALKER|::|WALK-FORM-EXPAND-MACROS-P|))
(|SYSTEM|::|C-PROCLAIM-CONSTANT| '|WALKER|::|*TOPLEVEL-ENVIRONMENT*|
 '(|COMMON-LISP|::|VECTOR| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|MACROEXPAND-ALL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |COMMON-LISP|::|&OPTIONAL|
    (|WALKER|::|ENVIRONMENT| |WALKER|::|*TOPLEVEL-ENVIRONMENT*|))))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |COMMON-LISP|::|&OPTIONAL|
    (|WALKER|::|ENVIRONMENT| |WALKER|::|*TOPLEVEL-ENVIRONMENT*|)
    (|WALKER|::|WALK-FUNCTION|
     #'(|COMMON-LISP|::|LAMBDA|
        (|WALKER|::|SUBFORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)
        (|COMMON-LISP|::|DECLARE|
         (|COMMON-LISP|::|IGNORE| |WALKER|::|CONTEXT| |WALKER|::|ENV|))
        |WALKER|::|SUBFORM|)))))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|NESTED-WALK-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|WHOLE| |WALKER|::|FORM| |COMMON-LISP|::|&OPTIONAL|
    (|WALKER|::|ENVIRONMENT| |WALKER|::|*TOPLEVEL-ENVIRONMENT*|)
    (|WALKER|::|WALK-FUNCTION|
     #'(|COMMON-LISP|::|LAMBDA|
        (|WALKER|::|SUBFORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)
        (|COMMON-LISP|::|DECLARE|
         (|COMMON-LISP|::|IGNORE| |WALKER|::|CONTEXT| |WALKER|::|ENV|))
        |WALKER|::|SUBFORM|)))))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-FORM-INTERNAL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-TEMPLATE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|TEMPLATE| |WALKER|::|CONTEXT|
    |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-TEMPLATE-HANDLE-REPEAT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|TEMPLATE| |WALKER|::|STOP-FORM|
    |WALKER|::|CONTEXT| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-TEMPLATE-HANDLE-REPEAT-1|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|TEMPLATE| |WALKER|::|REPEAT-TEMPLATE|
    |WALKER|::|STOP-FORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-REPEAT-EVAL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|WALKER|::|FORM| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|RECONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|X| |COMMON-LISP|::|CAR| |COMMON-LISP|::|CDR|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|RELIST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|X| |COMMON-LISP|::|&REST| |WALKER|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|RELIST*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|X| |COMMON-LISP|::|&REST| |WALKER|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|RELIST-INTERNAL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|X| |WALKER|::|ARGS| |WALKER|::|*P|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-DECLARATIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|BODY| |WALKER|::|FN| |WALKER|::|ENV| |COMMON-LISP|::|&OPTIONAL|
    |WALKER|::|DOC-STRING-P| |WALKER|::|DECLARATIONS| |WALKER|::|OLD-BODY|
    |COMMON-LISP|::|&AUX|
    (|WALKER|::|FORM| (|COMMON-LISP|::|CAR| |WALKER|::|BODY|))
    |WALKER|::|MACROP| |WALKER|::|NEW-FORM|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-UNEXPECTED-DECLARE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-ARGLIST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|ARGLIST| |WALKER|::|CONTEXT| |WALKER|::|ENV|
    |COMMON-LISP|::|&OPTIONAL|
    (|WALKER|::|DESTRUCTURINGP| |COMMON-LISP|::|NIL|) |COMMON-LISP|::|&AUX|
    |WALKER|::|ARG|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-LET|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-LET*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-PROG|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-PROG*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-DO|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-DO*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-LET/LET*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|OLD-ENV|
    |WALKER|::|SEQUENTIALP|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-LOCALLY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-PROG/PROG*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|OLD-ENV|
    |WALKER|::|SEQUENTIALP|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-DO/DO*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|OLD-ENV|
    |WALKER|::|SEQUENTIALP|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-LET-IF|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-MULTIPLE-VALUE-SETQ|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-MULTIPLE-VALUE-BIND|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|OLD-ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-BINDINGS-1|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|BINDINGS| |WALKER|::|OLD-ENV| |WALKER|::|NEW-ENV|
    |WALKER|::|CONTEXT| |WALKER|::|SEQUENTIALP|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-BINDINGS-2|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|BINDINGS| |WALKER|::|WALKED-BINDINGS| |WALKER|::|CONTEXT|
    |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-LAMBDA|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|OLD-ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-NAMED-LAMBDA|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|OLD-ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-SETQ|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-SYMBOL-MACROLET|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|OLD-ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-TAGBODY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-TAGBODY-1|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-COMPILER-LET|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|OLD-ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-MACROLET|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|OLD-ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-FLET|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|OLD-ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-LABELS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|OLD-ENV|)))
(|SYSTEM|::|C-DEFUN| '|WALKER|::|WALK-IF|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|WALKER|::|FORM| |WALKER|::|CONTEXT| |WALKER|::|ENV|)))
